apiVersion: v1
kind: Template
metadata:
  annotations:
    description: "Initialize Pipeline Objects for Tekton Java Builds"
    iconClass: icon-java
    openshift.io/display-name: "Initialize Pipeline Objects for Tekton Java Builds (Spring Boot & Quarkus)"
    template.openshift.io/bindable: "false"
    tags: "tekton"
    version: "1.0"
  name: tekton-pipeline-common-config
objects:
  - apiVersion: redhatcop.redhat.io/v1alpha1
    kind: NamespaceConfig
    metadata:
      name: tekton-pipeline-common-config
    spec:
      labelSelector:
        - { key: pipeline, operator: In, values: [run, build] }
      templates:
      - objectTemplate: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: pipeline
            namespace: {{ .Name }}
      - objectTemplate: |
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: edit
            namespace: {{ .Name }}
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: edit
          subjects:
          - kind: ServiceAccount
            name: pipeline
            namespace: {{ .Name }}
      - objectTemplate: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: maven-settings-xml
            namespace: {{ .Name }}
          data:
            settings.xml: |
              <?xml version="1.0" encoding="UTF-8"?>
              <settings>
                  <mirrors>
                      <mirror>
                          <id>${MVN_MIRROR_ID}</id>
                          <name>${MVN_MIRROR_NAME}</name>
                          <url>${MVN_MIRROR_URL}</url>
                          <mirrorOf>*</mirrorOf>
                      </mirror>
                  </mirrors>
                  <profiles>
                      <profile>
                          <id>maven-nexus-repo</id>
                          <repositories>
                              <repository>
                                  <id>${MVN_MIRROR_ID}</id>
                                  <name>${MVN_MIRROR_NAME}</name>
                                  <url>${MVN_MIRROR_URL}</url>
                              </repository>
                          </repositories>
                      </profile>
                  </profiles>
                  <activeProfiles>
                      <activeProfile>maven-nexus-repo</activeProfile>
                  </activeProfiles>
              </settings>

      - objectTemplate: |
          apiVersion: tekton.dev/v1beta1
          kind: Task
          metadata:
            name: config-app
            namespace: {{ .Name }}
          spec:
            params:
            - name: config-git-repo
              type: string
              description: "Git Repository URL"
            - name: config-git-branch
              type: string
              description: "Git Branch to clone"
              default: "master"
            - name: appName
              description: the application name
            steps:
            - name: prep-build
              image: image-registry.openshift-image-registry.svc:5000/openshift/mvn-jdk-mandrel:3.6.3-jdk11-20.1.0.2
              imagePullPolicy: IfNotPresent
              script: |
                git clone -b $(params.git-branch) --single-branch $(params.git-repo) /workspace/source
              env:
              - name: user.home
                value: /tekton/home
              workingDir: "/"
            - name: apply
              image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.5.0
              imagePullPolicy: IfNotPresent
              workingDir: /workspace/source
              script: |
                echo "Applying configs in ocp/config directory"
                oc apply -f ./ocp/config
                if [ -f ./ocp/patch/deployment-patch.yaml ]
                then
                  echo "Patching deployment"
                  sed -i "s|--APP_NAME--|$(params.appName)|g" ./ocp/patch/deployment-patch.yaml
                  oc patch deployment $(params.appName) --patch "$(cat ./ocp/patch/deployment-patch.yaml)"
                fi
                echo -----------------------------------
      - objectTemplate: |
          apiVersion: tekton.dev/v1beta1
          kind: Task
          metadata:
            name: deploy-app
            namespace: {{ .Name }}
          spec:
            params:
            - name: appName
              description: the application name
            steps:
            - name: rollout
              image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.5.0
              imagePullPolicy: IfNotPresent
              workingDir: /workspace
              command: ["/bin/bash", "-c"]
              args:
              - |-
                  echo Rolling out $(params.appName)
                  DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                  oc set image deployment/$(params.appName) $(params.appName)=${DESTINATION_IMAGE}
                  oc rollout restart deployment/$(params.appName)
                  echo -----------------------------------
      - objectTemplate: |
          apiVersion: tekton.dev/v1beta1
          kind: Task
          metadata:
            name: initialize-deployment
            namespace: {{ .Name }}
          spec:
            params:
              - name: appName
                description: the application name
            steps:
              - name: initialize
                image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:4.5.0
                imagePullPolicy: Always
                workingDir: /workspace
                command: ["/bin/bash", "-c"]
                args:
                  - |-
                    echo Configuring Deployment $(params.appName)
                    DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.appName):latest"
                    oc set image deployment/$(params.appName) $(params.appName)=${DESTINATION_IMAGE}
                    echo -----------------------------------

parameters:
- description: "ID for your Maven Nexus mirror"
  displayName: "Maven Mirror ID"
  name: MVN_MIRROR_ID
  required: true
  value: "homelab-central"
- description: "Maven Mirror Name"
  displayName: "Maven Mirror Name"
  name: MVN_MIRROR_NAME
  required: true
  value: "homelab-central"
- description: "Maven Mirror URL"
  displayName: "Maven Mirror URL"
  name: MVN_MIRROR_URL
  required: true
  value: "https://nexus.your.domain.com:8443/repository/homelab-central/"
